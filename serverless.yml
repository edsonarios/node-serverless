service: scoops-test
frameworkVersion: '3'

custom:
  userName: 'users-table-${sls:stage}'
  roleName: 'roles-table-${sls:stage}'
  counterName: 'counters-table-${sls:stage}'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:CreateTable
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - Fn::Join:
              - '/'
              - - Fn::GetAtt: [ UsersTable, Arn ]
                - 'index/EmailIndex'
            - Fn::GetAtt: [ RolesTable, Arn ]
            - Fn::GetAtt: [ CountersTable, Arn ]
  environment:
    USERS_TABLE: ${self:custom.userName}
    ROLES_TABLE: ${self:custom.roleName}
    COUNTERS_TABLE: ${self:custom.counterName}

package:
  excludeDevDependencies: true
  exclude:
    - .dynamodb/**

functions:
  api:
    handler: index.handler
    timeout: 30
    environment:
      DATABASE_TYPE: dynamo
    events:
      - httpApi: '*'

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.userName}
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
    RolesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.roleName}
    CountersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.counterName}

plugins:
  - serverless-scriptable-plugin
  # Uncomment for local environment and install devDependencies
  # - serverless-offline
  # - serverless-dynamodb-local
